<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.alibaba.com/schema/stat
       http://www.alibaba.com/schema/stat.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">


    <!--数据源-->
    <bean id="myDataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init"
          destroy-method="close">
        <!--使用set注入给数据池提供数据库信息, 连接到数据库 -->
        <property name="url" value="jdbc:mysql://localhost:3306/javatest?useUnicode=true&amp;characterEncoding=UTF-8&amp;userSSL=false&amp;serverTimezone=GMT%2B8"/>
        <property name="username" value="root"/>
        <property name="password" value="suda12034512"/>
        <property name="maxActive" value="20"/>

    </bean>

    <!--声明SQLSessionFactoryBean类用于创建SQLSessionFactory-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">

    <!--set注入,把数据库连接池赋给myDataSource-->
        <property name="dataSource" ref="myDataSource"/>
    <!--mybatis主配置文件位置-->
        <property name="configLocation" value="classpath:config.xml"/>
    </bean>

    <!--在内部调用getMapp()生成每个dao接口的代理对象-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
<!--            指定SQLSessionFactory对象的id-->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        <!--指定包名,dao接口所在包.   MapperScannerConfigurer会扫描这个包中的所有接口,每个执行getMapper()方法,得到对象,放入Spring的容器中-->
        <property name="basePackage" value="dao"/>
    </bean>

    <!--事务处理注册,name为数据池-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="myDataSource"/>

    </bean>
    <!--开启注解-->
    <tx:annotation-driven transaction-manager="transactionManager"/>


</beans>